name: API Auto Mock - tested for Provider Drift

# Create/Upload OpenAPI Document in SwaggerHub
# Enable API Auto Mocking - https://support.smartbear.com/swaggerhub/docs/integrations/api-auto-mocking.html
# Edit OpenAPI Document in SwaggerHub
# Sync OpenAPI -> SCM with Github Sync - https://support.smartbear.com/swaggerhub/docs/integrations/github-sync.html
# Version number = OpenAPI SemVer Version + GitHub Commit Sha for traceability on change
# OpenAPI + Provider Test Report = Provider Contract Uploaded to Pactflow
# *** Tests are autogenerated by Dredd and issued against our API Auto Mock ***
# Pactflow will tell users if the API Auto Mock has not drifted from the OAS, giving confidence in the mock as it will be used by consumers during discovery

on:
  push:
    branches: ["main", "swaggerhub*"]
    paths:
      - "oas/**"
  pull_request:
    branches: ["main"]
    paths:
      - "oas/**"

  workflow_dispatch:

# (This just saves defining these multiple times for different pact jobs)
env:
  version: ${{ github.sha }}
  environment: test
  application_name: swaggerhub-pactflow-provider
  PACT_BROKER_BASE_URL: https://saflow.pactflow.io
  PACT_BROKER_TOKEN: ${{ secrets.PACT_BROKER_TOKEN }}
  SWAGGERHUB_API_KEY: ${{ secrets.SWAGGERHUB_API_KEY }}
  SWAGGERHUB_URL: https://api.swaggerhub.com
  SWAGGERHUB_ORG: YOU54F
  SWAGGERHUB_API_NAME: swaggerhub-pactflow

jobs:
  setup-auto-mock:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
      - run: npm install -g swaggerhub-cli
      - name: get version of OAS
        run: |
          sudo snap install yq && 
          OAS_VERSION=$(yq '.info.version' oas/swagger.yaml)
          echo "OAS_VERSION=${OAS_VERSION}" >> $GITHUB_ENV 
          echo "SWAGGERHUB_API_PATH=${SWAGGERHUB_ORG}/${SWAGGERHUB_API_NAME}/${OAS_VERSION}" >> $GITHUB_ENV 
          UNIQUE_VERSION=${OAS_VERSION}-${{ github.sha }}-automock
          echo "version=${UNIQUE_VERSION}" >> $GITHUB_ENV
      - name: create automock integration file
        run: |
          mkdir integrations && echo '{"name":"API Automock Integration","configType":"API_AUTO_MOCKING","defaultResponseType":"application/json","modify":false}' >> integrations/api_auto_mocking.json
      - name: create automock integration for version
        continue-on-error: true
        run: |
          swaggerhub integration:create ${SWAGGERHUB_API_PATH} -f integrations/api_auto_mocking.json
      - name: enable automock integration for version
        run: |
          swaggerhub integration:list ${SWAGGERHUB_API_PATH}
          swaggerhub integration:list ${SWAGGERHUB_API_PATH} | grep -e 'API_AUTO_MOCKING' | cut -f1,2 -d' ' | xargs echo ${SWAGGERHUB_API_PATH} | sed -e "s/ /\//g" | xargs swaggerhub integration:execute
    outputs:
      version: ${{ env.version }}
      SWAGGERHUB_API_PATH: ${{ env.SWAGGERHUB_API_PATH }}

  test-auto-mock:
    needs: [setup-auto-mock]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
      - run: npm install -g dredd
      - run: dredd --reporter markdown --output ./output/report.md oas/swagger.yaml https://virtserver.swaggerhub.com/${{ needs.setup-auto-mock.outputs.SWAGGERHUB_API_PATH }}
      - uses: pactflow/actions/publish-provider-contract@v1.0.0
        if: success()
        env:
          oas_file: oas/swagger.yaml
          results_file: output/report.md
          version: ${{ needs.setup-auto-mock.outputs.version }}
          VERIFIER_TOOL: dredd-github-actions
      - uses: pactflow/actions/publish-provider-contract@v1.0.0
        if: failure()
        env:
          oas_file: oas/swagger.yaml
          results_file: output/report.md
          version: ${{ needs.setup-auto-mock.outputs.version }}
          VERIFIER_TOOL: dredd-github-actions
          # ensure we set the EXIT_CODE to ensure we upload a failing self-verification result
          EXIT_CODE: 1

  pact-can-i-deploy:
    needs: [setup-auto-mock, test-auto-mock]
    runs-on: ubuntu-latest
    steps:
      - uses: pactflow/actions/can-i-deploy@v1.0.0
        env:
          to_environment: ${{ env.environment }}
          version: ${{ needs.setup-auto-mock.outputs.version }}

  pact-record-release:
    needs: [setup-auto-mock, pact-can-i-deploy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      version: ${{ needs.setup-auto-mock.outputs.version }}
    steps:
      - run: |
          docker run --rm -v /${PWD}:/${PWD} -w ${PWD} \
          -e PACT_BROKER_BASE_URL \
          -e PACT_BROKER_TOKEN \
          -e application_name \
          -e version \
          -e environment \
          pactfoundation/pact-cli:latest \
          broker record-release \
          --environment=$environment \
          --pacticipant=$application_name \
          --broker-base-url=$PACT_BROKER_BASE_URL \
          --broker-token=$PACT_BROKER_TOKEN \
          --version=$version
