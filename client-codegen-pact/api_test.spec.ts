/**
 * Product API
 * Pactflow Product API demo
 *
 * OpenAPI spec version: 2.0.3
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api";
import { PactV3, MatchersV3 } from "@pact-foundation/pact";
import path from "path";

const { like, eachLike } = MatchersV3;

const provider = new PactV3({
  dir: path.resolve(process.cwd(), "pacts"),
  consumer: "swaggerhub-pactflow-consumer-codegen",
  provider: "swaggerhub-pactflow-provider",
});

describe("DefaultApi", () => {
  let instance: api.DefaultApi;

  test("createProduct", () => {
    const body: api.Product = {
      id: "1234",
      type: "food",
      price: 42,
      name: "burger",
    };
    provider
      .given("a product with id 1234 does not exist")
      .uponReceiving("a request for to create product 1234")
      .withRequest({
        method: "POST",
        path: "/products",
        body: like({ ...body }),
      })
      .willRespondWith({
        status: 200,
        headers: { "Content-Type": "application/json" },
        body: like({ ...body }),
      });

    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi({ basePath: mockserver.url });
      const response = await instance.createProduct(body, {});
      expect(response).toEqual(body);
    });
  });
  test("getAllProducts", () => {
    const expectedProduct = {
      id: "10",
      type: "CREDIT_CARD",
      name: "28 Degrees",
    };
    provider
      .given("products exist")
      .uponReceiving("a request to get all products")
      .withRequest({
        method: "GET",
        path: "/products",
      })
      .willRespondWith({
        status: 200,
        headers: { "Content-Type": "application/json" },
        body: eachLike(expectedProduct),
      });

    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi({ basePath: mockserver.url });
      const response = await instance.getAllProducts({});
      expect(response).toEqual([expectedProduct]);
    });
  });
  test("getProductByID", () => {
    const expectedProduct = {
      id: "10",
      type: "CREDIT_CARD",
      name: "28 Degrees",
    };
    provider
      .given("a product with ID 10 exists")
      .uponReceiving("a request to get a product")
      .withRequest({
        method: "GET",
        path: "/product/" + expectedProduct.id,
      })
      .willRespondWith({
        status: 200,
        headers: { "Content-Type": "application/json" },
        body: like(expectedProduct),
      });

    return provider.executeTest(async (mockserver) => {
      instance = new api.DefaultApi({ basePath: mockserver.url });
      const response = await instance.getProductByID(expectedProduct.id, {});
      expect(response).toEqual(expectedProduct);
    });
  });
});
